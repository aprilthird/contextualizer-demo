@page "/register"

@layout EmptyLayout

@inject NavigationManager NavManager
@inject ILocalStorageService LocalStorage
@inject ISessionStorageService SessionStorage
@inject RegisterViewModel ViewModel

<PageTitle>Register - @Constants.AppName</PageTitle>

<div class="bg-white bg-opacity-75 p-5 m-auto">     
    <div class="text-center mb-4">
        <img src="/media/logo-contextualize.png" width="300"/>
    </div>
    <h3 class="text-uppercase">Personal Information</h3>
    <EditForm Model="ViewModel" OnValidSubmit="OnContinue" OnInvalidSubmit="ShowAlertAsync">
        <FluentValidationValidator />
        <div class="alert alert-danger alert-dismissible fade @AlertDisplayClass" role="alert" style="display:@AlertDisplayCss">
            <h5 class="alert-heading">Error</h5>
            <p>@ErrorMessage</p>
            <ValidationSummary />
            @*<button class="close" type="button" data-dismiss="alert" aria-label="Close" @onclick="CloseAlertAsync"><span aria-hidden="true">&times;</span></button>*@
        </div>
        <div class="form-group">
            <label for="first_name" class="form-label">First Name</label>
            <div class="input-group mb-3">
              <div class="input-group-prepend">
                <span class="input-group-text">
                    <span><i class="fa-solid fa-id-card"></i></span>
                </span>
              </div>        
              <InputText @bind-Value="ViewModel.FirstName" id="first_name" class="form-control" placeholder="First Name" type="text" required />
            </div>
        </div>
        <div class="form-group">
            <label for="last_name" class="form-label">Last Name</label>
            <div class="input-group mb-3">
              <div class="input-group-prepend">
                <span class="input-group-text">
                    <span><i class="fa-solid fa-id-card"></i></span>
                </span>
              </div>        
              <InputText @bind-Value="ViewModel.LastName" id="last_name" class="form-control" placeholder="Last Name" type="text" required />
            </div>
        </div>
        <div class="form-group">
            <label for="birth_date" class="form-label">Birth Date</label>
            <div class="input-group mb-3">
              <div class="input-group-prepend">
                <span class="input-group-text">
                    <span><i class="fa-solid fa-calendar"></i></span>
                </span>
              </div>        
              <InputDate @bind-Value="ViewModel.BirthDate" id="birth_date" class="form-control" placeholder="Birth Date" required />
            </div>
        </div>
        <div class="form-group">
            <label for="email" class="form-label">Email</label>
            <div class="input-group mb-3">
              <div class="input-group-prepend">
                <span class="input-group-text">
                    <span><i class="fa-solid fa-at"></i></span>
                </span>
              </div>        
              <InputText @bind-Value="ViewModel.Email" id="email" class="form-control" placeholder="Email" type="email" required />
            </div>
        </div>
        <div class="form-group">
            <label for="password" class="form-label">Password</label>
            <div class="input-group mb-3">
              <div class="input-group-prepend">
                <span class="input-group-text">
                    <span><i class="fa-solid fa-key"></i></span>
                </span>
              </div>        
            <InputText @bind-Value="ViewModel.Password" id="password" class="form-control" placeholder="Password" type="password" required />
            </div>
        </div>
        <div class="form-group">
            <label for="confirm_password" class="form-label">Confirm Password</label>
            <div class="input-group mb-3">
              <div class="input-group-prepend">
                <span class="input-group-text">
                    <span><i class="fa-solid fa-key"></i></span>
                </span>
              </div>        
            <InputText @bind-Value="ViewModel.ConfirmPassword" id="confirm_password" class="form-control" placeholder="Confirm Password" type="password" required />
            </div>
        </div>
        <div class="d-flex justify-content-between align-items-center">
            <a href="/login" class="small">Back to Login</a>
            <button class="btn btn-primary" type="submit">Continue</button>
        </div>
    </EditForm>
</div>

@code {
    private string? ErrorMessage;
    private string AlertDisplayClass = "hide";
    private string AlertDisplayCss = "none;";

    private async Task OnContinue()
    {
        var user = await LocalStorage.GetItemAsync<User>(ViewModel.Email);
        if(user != null)
        {
            ErrorMessage = "Email is already registered";
            await ShowAlertAsync();
        }
        else
        {
            user = new User();
            user.FirstName = ViewModel.FirstName;
            user.LastName = ViewModel.LastName;
            user.BirthDate = ViewModel.BirthDate;
            user.Email = ViewModel.Email;
            user.Password = ViewModel.Password;
            user.IsNew = true;
            await SessionStorage.SetItemAsync<User>("current-register", user);
            NavManager.NavigateTo("/role-selector");       
        }
    }

    public async Task ShowAlertAsync()
    {
        AlertDisplayCss = "block;";
        await Task.Delay(500);
        AlertDisplayClass = "show";
    }

    public async Task CloseAlertAsync()
    {
        ErrorMessage = null;
        AlertDisplayClass = "hide";
        await Task.Delay(1000);
        AlertDisplayCss = "none;";
    }

    protected override async Task OnInitializedAsync()
    {
        var user = await SessionStorage.GetItemAsync<User>("current-register");
        if (user != null)
        {
            ViewModel.FirstName = user.FirstName;
            ViewModel.LastName = user.LastName;
            ViewModel.BirthDate = user.BirthDate;
            ViewModel.Email = user.Email;
        }
        await base.OnInitializedAsync();
    }
}
